package VWB::REST::App;

use Dancer2;
use Data::Dumper;
use Carp;
use File::Path;
use File::Basename;
use FindBin;

use lib "$FindBin::Bin/../lib";

use VWB::REST::Logger;
use VWB::REST::Manager;

use constant TRUE => 1;
use constant FALSE => 0;

use constant SESSION_TOKEN => time();

use constant DEFAULT_OUTDIR => './output/' . SESSION_TOKEN;

use constant DEFAULT_LOG_LEVEL => 4;

use constant DEFAULT_LOG_FILE =>  DEFAULT_OUTDIR . '/' . File::Basename::basename($0) . '.log';

use constant DEFAULT_CONFIG_FILE => "$FindBin::Bin/../conf/app_config.ini";

use constant DEFAULT_ENVIRONMENT => '';

set serializer => 'JSON';

#set session => "Simple";

our $VERSION = '0.1';


my $outdir = File::Basename::dirname(DEFAULT_LOG_FILE);

if (!-e $outdir){
    mkpath($outdir) || confess "Could not create directory '$outdir' : $!";
}


my $logger = new VWB::REST::Logger(
    logfile   => DEFAULT_LOG_FILE, 
    log_level => DEFAULT_LOG_LEVEL);

if (!defined($logger)){
    confess "Could not instantiate VWB::REST::Logger";
}

my $manager = VWB::REST::Manager::getInstance(
    config_file => DEFAULT_CONFIG_FILE,
    environment => DEFAULT_ENVIRONMENT,
    logfile     => DEFAULT_LOG_FILE,
    log_level   => DEFAULT_LOG_LEVEL
    );

if (!defined($manager)){
    $logger->logconfess("Could not instantiate VWB::REST::Manager");
}

## Will insert autogenerated methods here
post '/file' => sub {
	

    # my $username = body_parameters->get('username');
    # if (!defined($username)){
    # 	$logger->logconfess("body parameter 'username' was not defined");
    # }

    # my $password = body_parameters->get('password');
    # if (!defined($password)){
    # 	$logger->logconfess("body parameter 'password' was not defined");
    # }


    my $path = body_parameters->get('path');
    if (!defined($path)){
    	$logger->logconfess("body parameter 'path' was not defined");
    }

    my $basename = body_parameters->get('basename');
    if (!defined($basename)){
        $basename = File::Basename::basename($path);
    	$logger->info("body parameter 'basename' was not defined and therefore was set to '$basename'");
    }

    my $desc = body_parameters->get('desc');
    if (!defined($desc)){
    	$logger->warn("body parameter 'desc' was not defined");
    }

    my $mode = body_parameters->get('mode');
    if (!defined($mode)){
    	$logger->warn("body parameter 'mode' was not defined");
    }

    my $inode = body_parameters->get('inode');
    if (!defined($inode)){
    	$logger->warn("body parameter 'inode' was not defined");
    }

    my $dev = body_parameters->get('dev');
    if (!defined($dev)){
    	$logger->warn("body parameter 'dev' was not defined");
    }

    my $nlink = body_parameters->get('nlink');
    if (!defined($nlink)){
    	$logger->warn("body parameter 'nlink' was not defined");
    }

    my $uid = body_parameters->get('uid');
    if (!defined($uid)){
    	$logger->warn("body parameter 'uid' was not defined");
    }

    my $gid = body_parameters->get('gid');
    if (!defined($gid)){
    	$logger->warn("body parameter 'gid' was not defined");
    }

    my $owner = body_parameters->get('owner');
    if (!defined($owner)){
    	$logger->warn("body parameter 'owner' was not defined");
    }

    my $group = body_parameters->get('group');
    if (!defined($group)){
    	$logger->warn("body parameter 'group' was not defined");
    }

    my $bytes_size = body_parameters->get('bytes_size');
    if (!defined($bytes_size)){
    	$logger->warn("body parameter 'bytes_size' was not defined");
    }

    my $atime = body_parameters->get('atime');
    if (!defined($atime)){
    	$logger->warn("body parameter 'atime' was not defined");
    }

    my $mtime = body_parameters->get('mtime');
    if (!defined($mtime)){
    	$logger->warn("body parameter 'mtime' was not defined");
    }

    my $ctime = body_parameters->get('ctime');
    if (!defined($ctime)){
    	$logger->warn("body parameter 'ctime' was not defined");
    }

    my $date_accessed = body_parameters->get('date_accessed');
    if (!defined($date_accessed)){
    	$logger->warn("body parameter 'date_accessed' was not defined");
    }

    my $date_modified = body_parameters->get('date_modified');
    if (!defined($date_modified)){
    	$logger->warn("body parameter 'date_modified' was not defined");
    }

    my $date_created = body_parameters->get('date_created');
    if (!defined($date_created)){
    	$logger->warn("body parameter 'date_created' was not defined");
    }

    my $publisher = body_parameters->get('publisher');
    if (!defined($publisher)){
    	$logger->warn("body parameter 'publisher' was not defined");
    }

    my $createAt = body_parameters->get('createAt');
    if (!defined($createAt)){
    	$logger->warn("body parameter 'createAt' was not defined");
    }

    my $checksum = body_parameters->get('checksum');
    if (!defined($checksum)){
    	$logger->warn("body parameter 'checksum' was not defined");
    }

    my $hostname = body_parameters->get('hostname');
    if (!defined($hostname)){
        $logger->warn("body parameter 'hostname' was not defined");
    }

    my $uuid = body_parameters->get('uuid');

    if (!defined($uuid)){

        $uuid = $manager->getUUID($checksum, $path, $hostname);
        
        $logger->info("body parameter 'uuid' was not defined and therefore was set to '$uuid'");
    }

    # my $ref = $manager->add_new_file($username, $password, $uuid, $path, $basename, $desc, $mode, $inode, $dev, $nlink, $uid, $gid, $owner, $group, $bytes_size, $atime, $mtime, $ctime, $date_accessed, $date_modified, $date_created, $publisher, $createAt, $md5checksum);
    my $ref = $manager->add_new_file($uuid, $path, $basename, $desc, $mode, $inode, $dev, $nlink, $uid, $gid, $owner, $group, $bytes_size, $atime, $mtime, $ctime, $date_accessed, $date_modified, $date_created, $publisher, $createAt, $checksum, $hostname);

    if (!defined($ref)){
    	$logger->logconfess("ref was not defined");
    }


    my $payload = {
    	'expiry'     => 0,
    	'label'      => "N/A",
    	'label-desc' => "N/A",
    	'data'       => $ref
    };

    return $payload;

};

get '/file_uuid_list' => sub {


	# my $username = body_parameters->get('username');
 #    if (!defined($username)){
 #    	$logger->logconfess("body parameter 'username' was not defined");
 #    }

 #    my $password = body_parameters->get('password');
 #    if (!defined($password)){
 #    	$logger->logconfess("body parameter 'password' was not defined");
 #    }

 #    my $ref = $manager->get_files_unique_identifier_list($username, $password);

    my $ref = $manager->get_files_unique_identifier_list();

    if (!defined($ref)){
    	$logger->logconfess("ref was not defined");
    }


    my $payload = {
    	'expiry'     => 0,
    	'label'      => "N/A",
    	'label-desc' => "N/A",
    	'data'       => $ref
    };

    $logger->fatal(Dumper $payload);

    return $payload;

};

get '/file/:uuid' => sub {

	my $uuid = route_parameters->get('uuid');
    if (!defined($uuid)){
    	$logger->logconfess("route parameter 'uuid' was not defined");
    }

	# my $username = body_parameters->get('username');
 #    if (!defined($username)){
 #    	$logger->logconfess("body parameter 'username' was not defined");
 #    }

 #    my $password = body_parameters->get('password');
 #    if (!defined($password)){
 #    	$logger->logconfess("body parameter 'password' was not defined");
 #    }

    # my $ref = $manager->get_file_details_by_unique_identifier($uuid, $username, $password);
    my $ref = $manager->get_file_details_by_unique_identifier($uuid);

    if (!defined($ref)){
    	$logger->logconfess("ref was not defined");
    }


    my $payload = {
    	'expiry'     => 0,
    	'label'      => "N/A",
    	'label-desc' => "N/A",
    	'data'       => $ref
    };

    return $payload;

};



dance();
 
true;

__END__


=head1 NAME

 VWB::REST::App

=head1 VERSION

 1.0

=head1 SYNOPSIS

 use VWB::REST::App;

=head1 AUTHOR

 Jaideep Sundaram

 Copyright Jaideep Sundaram

=head1 METHODS

=over 4

=cut