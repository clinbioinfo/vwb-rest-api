package VWB::REST::MongoDB::DBUtil;

use Moose;
use MongoDB;  ## Reference: http://search.cpan.org/~mongodb/MongoDB-v1.8.0/lib/MongoDB.pm
use Data::Dumper;

use VWB::REST::Config::Manager;

extends 'VWB::REST::DBUtil';

use constant TRUE  => 1;
use constant FALSE => 0;

## Singleton support
my $instance;

use constant DEFAULT_CONFIG_FILE => "$FindBin::Bin/../conf/app_config.ini";

use constant DEFAULT_PORT_NUMBER => 3001;

use constant DEFAULT_DATABASE => 'meteor';

use constant DEFAULT_HOST => 'localhost';

has 'config_file' => (
    is       => 'rw',
    isa      => 'Str',
    writer   => 'setConfigFile',
    reader   => 'getConfigFile',
    required => FALSE,
    default  => DEFAULT_CONFIG_FILE
);

has 'port_number' => (
    is       => 'rw',
    isa      => 'Int',
    writer   => 'setPortNumber',
    reader   => 'getPortNumber',
    required => FALSE,
    default  => DEFAULT_PORT_NUMBER
);

has 'database' => (
    is       => 'rw',
    isa      => 'Str',
    writer   => 'setDatabase',
    reader   => 'getDatabase',
    required => FALSE,
    default  => DEFAULT_DATABASE
);

has 'host' => (
    is       => 'rw',
    isa      => 'Str',
    writer   => 'setHost',
    reader   => 'getHost',
    required => FALSE,
    default  => DEFAULT_HOST
);

sub getInstance {

    if (!defined($instance)){

        $instance = new VWB::REST::MongoDB::DBUtil(@_);

        if (!defined($instance)){

            confess "Could not instantiate VWB::REST::MongoDB::DBUtil";
        }
    }
    return $instance;
}

sub BUILD {

    my $self = shift;

    $self->_initLogger(@_);
    $self->_initConfigManager(@_);
    $self->_initConnection(@_);

    $self->{_logger}->info("Instantiated " . __PACKAGE__);
}


sub _initConfigManager {

    my $self = shift;

    my $config_file = $self->getConfigFile();

    if (!defined($config_file)){
        $self->{_logger}->logconfess("config_file was not defined");
    }

    my $manager = VWB::REST::Config::Manager::getInstance(config_File => $config_file);
    if (!defined($manager)){
        $self->{_logger}->logconfess("Could not instantiate VWB::REST::Config::Manager");
    }

    $self->{_config_manager} = $manager;
}


sub _initConnection {

    my $self = shift;

    my $port_number = $self->getPortNumber();
    if (!defined($port_number)){
    	$self->{_logger}->logconfess("port_number was not defined");
    }

    my $host = $self->getHost();
    if (!defined($host)){
    	$self->{_logger}->logconfess("host was not defined");
    }

	my $client = MongoDB->connect("mongodb://$host:$port_number");
	if (!defined($client)){
		$self->{_logger}->logconfess("Could not instantiate MongoDB client");
	}

	my $database = $self->getDatabase();
	if (!defined($database)){
		$self->{_logger}->logconfess("database was not defined");
	}

	my $db = $client->get_database($database);
	if (!defined($db)){
		$self->{_logger}->logconfess("Could not get database '$database'");
	}

	$self->{_db} = $db;
}


## Will insert the autogenerated methods here
sub add_new_file{

	my $self = shift;
	# my ($username, $password, $uuid, $path, $basename, $desc, $mode, $inode, $dev, $nlink, $uid, $gid, $owner, $group, $bytes_size, $atime, $mtime, $ctime, $date_accessed, $date_modified, $date_created, $publisher, $createAt, $md5checksum) = @_;
	my ($uuid, $path, $basename, $desc, $mode, $inode, $dev, $nlink, $uid, $gid, $owner, $group, $bytes_size, $atime, $mtime, $ctime, $date_accessed, $date_modified, $date_created, $publisher, $createAt, $md5checksum, $hostname) = @_;

	# if (!defined($username)){
	# 	$self->{_logger}->logconfess("$username was not defined");
	# }

	# if (!defined($password)){
	# 	$self->{_logger}->logconfess("$password was not defined");
	# }

	my $lookup = {};

	if (!defined($uuid)){
		$self->{_logger}->logconfess("$uuid was not defined");
	}
	else {
		$lookup->{'uuid'} = $uuid;
	}

	if (!defined($path)){
		$self->{_logger}->logconfess("$path was not defined");
	}
	else {
		$lookup->{'path'} = $path;
	}

	if (!defined($basename)){
		$self->{_logger}->logconfess("$basename was not defined");
	}
	else {
		$lookup->{'basename'} = $basename;
	}


	if (!defined($desc)){
		$self->{_logger}->logconfess("$desc was not defined");
	}
	else {
		$lookup->{'desc'} = $desc;
	}

	if (!defined($mode)){
		$self->{_logger}->logconfess("$mode was not defined");
	}
	else {
		$lookup->{'mode'} = $mode;
	}

	if (!defined($inode)){
		$self->{_logger}->logconfess("$inode was not defined");
	}
	else {
		$lookup->{'inode'} = $inode;
	}

	if (!defined($dev)){
		$self->{_logger}->logconfess("$dev was not defined");
	}
	else {
		$lookup->{'dev'} = $dev;
	}

	if (!defined($nlink)){
		$self->{_logger}->logconfess("$nlink was not defined");
	}
	else {
		$lookup->{'nlink'} = $nlink;
	}

	if (!defined($uid)){
		$self->{_logger}->logconfess("$uid was not defined");
	}
	else {
		$lookup->{'uid'} = $uid;
	}

	if (!defined($gid)){
		$self->{_logger}->logconfess("$gid was not defined");
	}
	else {
		$lookup->{'gid'} = $gid;
	}

	if (!defined($owner)){
		$self->{_logger}->logconfess("$owner was not defined");
	}
	else {
		$lookup->{'owner'} = $owner;
	}

	if (!defined($group)){
		$self->{_logger}->logconfess("$group was not defined");
	}
	else {
		$lookup->{'group'} = $group;
	}

	if (!defined($bytes_size)){
		$self->{_logger}->logconfess("$bytes_size was not defined");
	}
	else {
		$lookup->{'bytes_size'} = $bytes_size;
	}

	if (!defined($atime)){
		$self->{_logger}->logconfess("$atime was not defined");
	}
	else {
		$lookup->{'atime'} = $atime;
	}

	if (!defined($mtime)){
		$self->{_logger}->logconfess("$mtime was not defined");
	}
	else {
		$lookup->{'mtime'} = $mtime;
	}

	if (!defined($ctime)){
		$self->{_logger}->logconfess("$ctime was not defined");
	}
	else {
		$lookup->{'ctime'} = $ctime;
	}

	if (!defined($date_accessed)){
		$self->{_logger}->logconfess("$date_accessed was not defined");
	}
	else {
		$lookup->{'date_accessed'} = $date_accessed;
	}

	if (!defined($date_modified)){
		$self->{_logger}->logconfess("$date_modified was not defined");
	}
	else {
		$lookup->{'date_modified'} = $date_modified;
	}

	if (!defined($date_created)){
		$self->{_logger}->logconfess("$date_created was not defined");
	}
	else {
		$lookup->{'date_created'} = $date_created;
	}

	if (!defined($publisher)){
		$self->{_logger}->info("$publisher was not defined");
	}
	else {
		$lookup->{'publisher'} = $publisher;
	}


	if (!defined($md5checksum)){
		$self->{_logger}->logconfess("$md5checksum was not defined");
	}
	else {
		$lookup->{'checksum'} = $md5checksum;
	}

	## Add a new file to


	my $collection = $self->{_db}->get_collection("files");
	if (!defined($collection)){
		$self->{_logger}->logconfess("Could not collection 'files'");
	}

	my $result = $collection->insert_one($lookup);
	if (!defined($result)){
		$self->{_logger}->logconfess("result was not defined");
	}

	if (! $result->acknowledged){
		$self->{_logger}->logconfess("The insert_one was not acknowledged for document : " . Dumper $lookup);
	}
	else {
		return $lookup;
	}

}

sub get_files_unique_identifier_list{

	my $self = shift;
	my ($username, $password) = @_;

	# if (!defined($username)){
	# 	$self->{_logger}->logconfess("$username was not defined");
	# }

	# if (!defined($password)){
	# 	$self->{_logger}->logconfess("$password was not defined");
	# }

	## Retrieve list of file unique identifiers.

	my $collection = $self->{_db}->get_collection("files");
	if (!defined($collection)){
		$self->{_logger}->logconfess("Could not collection 'files'");
	}

	
	my $cursor = $collection->find({},{'uuid' => 1, '_id' => 0});

	if (!defined($cursor)){
		$self->{_logger}->logconfess("cursor was not defined");
	}

	my $list = [];

	while (my $doc = $cursor->next()){

		my $uuid = $doc->{uuid};

		push(@{$list}, $uuid);
	}

	$self->{_logger}->info("Found '" . scalar(@{$list}) . "' documents");

	return $list;
}

sub get_file_details_by_unique_identifier{

	my $self = shift;
	my ($uuid, $username, $password) = @_;

	if (!defined($uuid)){
		$self->{_logger}->logconfess("$uuid was not defined");
	}

	# if (!defined($username)){
	# 	$self->{_logger}->logconfess("$username was not defined");
	# }

	# if (!defined($password)){
	# 	$self->{_logger}->logconfess("$password was not defined");
	# }

	## Retrieve file details by unique identifier.


	my $collection = $self->{_db}->get_collection("files");
	if (!defined($collection)){
		$self->{_logger}->logconfess("Could not collection 'files'");
	}
	
	my $cursor = $collection->find({'uuid' => $uuid}, {'_id' => 0});
	if (!defined($cursor)){
		$self->{_logger}->logconfess("cursor was not defined");
	}


	## Only care about the first document.  In fact, there should only be one document.
	my $doc = $cursor->next();

	if (defined($doc)){

		delete $doc->{'_id'};

		return $doc;
	}
	else {
		return undef;
	}

}

no Moose;
__PACKAGE__->meta->make_immutable;

__END__

=head1 NAME

 VWB::REST::MongoDB::DBUtil
 A module for interacting with a MongoDB database.

=head1 VERSION

 1.0

=head1 SYNOPSIS

 use VWB::REST::MongoDB::DBUtil;
 my $dbutil = VWB::REST::MongoDB::DBUtil::getInstance();
 $dbutil->insertRecord($record);

=head1 AUTHOR

 Jaideep Sundaram

 Copyright Jaideep Sundaram

 Distributed under GNU General Public License

=head1 METHODS

=over 4

=cut
